// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartWineRack.Db;

#nullable disable

namespace SmartWineRack.Migrations
{
    [DbContext(typeof(WineRackDbContext))]
    [Migration("20221228002439_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("SmartWineRack.Db.Bottle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("UpcCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bottle", (string)null);
                });

            modelBuilder.Entity("SmartWineRack.Db.Scanner", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("Scanner", (string)null);
                });

            modelBuilder.Entity("SmartWineRack.Db.WineRack", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("WineRack", (string)null);
                });

            modelBuilder.Entity("SmartWineRack.Db.WineRackConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "AK_Config")
                        .IsUnique();

                    b.ToTable("WineRackConfig", (string)null);
                });

            modelBuilder.Entity("SmartWineRack.Db.WineRackSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WineRackId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WineRackId");

                    b.ToTable("WineRackSlot", (string)null);
                });

            modelBuilder.Entity("SmartWineRack.Db.Bottle", b =>
                {
                    b.HasOne("SmartWineRack.Db.WineRackSlot", "WineRackSlot")
                        .WithOne("Bottle")
                        .HasForeignKey("SmartWineRack.Db.Bottle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineRackSlot");
                });

            modelBuilder.Entity("SmartWineRack.Db.Scanner", b =>
                {
                    b.HasOne("SmartWineRack.Db.WineRack", "WineRack")
                        .WithOne("Scanner")
                        .HasForeignKey("SmartWineRack.Db.Scanner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineRack");
                });

            modelBuilder.Entity("SmartWineRack.Db.WineRackSlot", b =>
                {
                    b.HasOne("SmartWineRack.Db.WineRack", null)
                        .WithMany("WineRackSlots")
                        .HasForeignKey("WineRackId");
                });

            modelBuilder.Entity("SmartWineRack.Db.WineRack", b =>
                {
                    b.Navigation("Scanner")
                        .IsRequired();

                    b.Navigation("WineRackSlots");
                });

            modelBuilder.Entity("SmartWineRack.Db.WineRackSlot", b =>
                {
                    b.Navigation("Bottle")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
